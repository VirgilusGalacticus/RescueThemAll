[gd_scene load_steps=11 format=2]

[ext_resource path="res://Models/HelicoV2.glb" type="PackedScene" id=1]
[ext_resource path="res://Materials/Helico/M_Helico_Metal.tres" type="Material" id=2]
[ext_resource path="res://Materials/Helico/M_Helico_Helice.tres" type="Material" id=3]
[ext_resource path="res://Materials/Helico/M_Helico_Secondary.tres" type="Material" id=4]
[ext_resource path="res://Materials/Helico/M_Helico_Main.tres" type="Material" id=6]
[ext_resource path="res://Materials/Helico/M_Helico_Glass.tres" type="Material" id=7]

[sub_resource type="Shader" id=3]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable.mono's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy *  clamp(sin(TIME*10.0)*100.0,0.0,1.0);
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 0.164706, 0.321569, 0.737255, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/emission = Color( 0.117647, 0.85098, 0.866667, 1 )
shader_param/emission_energy = 3.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="Animation" id=1]
resource_name = "EngineOn"
length = 3.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Helice003:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1, 1.5, 2, 2.5, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( 0, 180, 0 ), Vector3( 0, 360, 0 ), Vector3( 0, 540, 0 ), Vector3( 0, 720, 0 ), Vector3( 0, 900, 0 ), Vector3( 0, 1080, 0 ) ]
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("Helice003:rotation_degrees:x")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( -4.13858, -0.25, 0, 0.25, 0, 3.71168, -0.25, 0, 0.25, 0, -4.06972, -0.2, 0, 0.2, 0, 3.89948, -0.25, 0, 0.25, 0, -4.29508, -0.25, 0, 0.25, 0, 3.71168, -0.25, 0, 0.25, 0, -4.13858, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.6, 1, 1.6, 2, 2.5, 3 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("Helice003:rotation_degrees:y")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray(  ),
"times": PoolRealArray(  )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath("Helice003:rotation_degrees:z")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray(  ),
"times": PoolRealArray(  )
}
tracks/4/type = "value"
tracks/4/path = NodePath("Helice002:rotation_degrees")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ), Vector3( -1800, 0, 0 ) ]
}

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Helice003:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Helice002:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( 0, 0, 0 ) ]
}

[node name="HelicoV2" instance=ExtResource( 1 )]

[node name="Patin" parent="." index="0"]
material/0 = ExtResource( 2 )

[node name="HelicoV2" parent="." index="1"]
material/0 = ExtResource( 6 )
material/1 = ExtResource( 2 )
material/2 = ExtResource( 4 )
material/3 = ExtResource( 7 )
material/4 = SubResource( 4 )

[node name="Helice002" parent="." index="2"]
material/0 = ExtResource( 3 )

[node name="Helice003" parent="." index="3"]
material/0 = ExtResource( 3 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="4"]
anims/EngineOn = SubResource( 1 )
anims/RESET = SubResource( 2 )
